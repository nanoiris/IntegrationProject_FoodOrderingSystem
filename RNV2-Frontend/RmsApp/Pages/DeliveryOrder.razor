@page "/deliveryOrder"

@using RmsApp.Services
@using RmsApp.Dtos
@using RestaurantDaoBase.Enums
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.Extensions.Logging
@inject ILogger<CategoryService> logger
@inject IFlashMessageService FlashMessageService
@inject AuthService authService

<ul class="breadcrumb breadcrumb-gray">
    @foreach (var path in Paths)
    {
        <li class="breadcrumb-item"><NavLink href="@path.Path">@path.Title</NavLink></li>
    }
</ul>

@if (!string.IsNullOrEmpty(FlashMessageService.SuccessMessage))
{
    <div class="alert alert-success">
        @FlashMessageService.SuccessMessage
    </div>
}
else if (!string.IsNullOrEmpty(FlashMessageService.FailureMessage))
{
    <div class="alert alert-danger">
        @FlashMessageService.FailureMessage
    </div>
}

<h2>Delivery Orders</h2>
<div class="p-3 rounded shadow-sm bg-white">
    <form asp-controller="Order" asp-action="search" method="post" class="col-12 mb-4 row">
        <div class="col-8 row">
            @*<input type="text"
                   class="form-control input_search border-right-0 col-11"
                   asp-for="SearchKey">*@
            <div class="input-group-prepend">
                <Button type="submit" class="btn input-group-text bg-white border_search border-left-0 text-primary">
                    <i class="fa fa-search"></i>
                </Button>
            </div>
            <div class="col-4">
                <select class="form-control">
                    @foreach (var status in Enum.GetValues(typeof(RestaurantDaoBase.Enums.RmsStatusEnum)))
                    {
                        <option value="@status">@status.ToString()</option>
                    }
                </select>
            </div>
        </div>
    </form>
    @if (DeliveryOrders != null && DeliveryOrders.Any())
    {
        <table class="table table-hover shadow-inset table-responsive-xl rounded table-striped">
            <thead class="text-danger font-weight-bold">
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Status</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in DeliveryOrders)
                {
                    <tr>
                        <td>@order.id</td>
                        <td>@order.UserName</td>
                        <td>@order.Status</td>
                        <td><a class="btn btn-icon-only btn-pill btn-primary" href="/order/edit/@order.id"><i class="fa fa-pen"></i></a></td>
                        <td><a class="btn btn-icon-only btn-pill btn-primary" href="/order/delete/@order.id"><i class="fa fa-trash"></i></a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No delivery orders found.</p>
    }
</div>


@code {
    public List<TabPath> Paths = new List<TabPath>
    {
        new TabPath { Title = "Home", Path = "/" },
        new TabPath { Title = "Order", Path = "/order" },
    };
    public List<OrderListDto> Orders { get; set; }

@* public string restaurantId = AuthService.User.RestaurantId; *@
public string restaurantId = Constants.RestaurantId;
public int status = (int)StatusEnum.Paid;

[Inject]
public IOrderService OrderService { get; set; }

public List<OrderListDto> DeliveryOrders { get; set; }

protected override async Task OnInitializedAsync()
{
@* if (!AuthService.IsLoggedIn)
    {
        NavigationManager.NavigateTo("/signin");
        return;
    } *@
    logger.LogInformation("order list OnInitializedAsync");
    Orders = await OrderService.ListOrderAsync(restaurantId, status);
    DeliveryOrders = Orders.Where(o => o.IsDelivery == true).ToList();
}
@* public enum StatusEnum
    {
        Cart = 0,Paid = 1,Accepted = 2,Ready = 3,Completed = 4, Canceled = 5
    } *@


}
