@page "/Account/EditProfile"
@page "/Account/EditProfile/{msg}"
@using DeliveryApp.Services
@using DeliveryApp.Data
@using DeliveryApp.Data.Dto
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Net.Http.Headers;
@using Serilog;
@using Microsoft.AspNetCore.Http;
@inject AuthService authService
@inject Utils utils
@inject NavigationManager NavigationManager

<div class="p-4 login-page-form">
    @if (msg != null)
    {
        <p class="py-2 pl-2 bg-warning">@msg</p>
    }
<a class="font-weight-bold text-back text-decoration-none d-flex" href="Account/Profile">
        <i class="feather-chevron-left"></i>
        <span class="pl-2">Back</span>
    </a>
    <div class="bg-white shadow">
        <div class="d-flex align-items-center border-bottom p-3">
            <div class="left mr-3">
                <img src="@logo" class="rounded-circle" height="50px">
            </div>
            <div class="right">
                <h6 class="mb-1 font-weight-bold">
                    @user.Name <i class="feather-check-circle text-success"></i>
                </h6>
                <p class="text-muted m-0 small">@user.Email</p>
            </div>
        </div>
    </div>
    <h6 class="mb-1 font-weight-bold">Edit your profile</h6> 
    <EditForm class="mt-4 " id="signupForm" Model="@user" OnValidSubmit="EditProfilePut" enctype="multipart/form-data">
        <DataAnnotationsValidator />
        <div class="form-group">
            <input @bind-value="user.Name" type="text" placeholder="Name" class="form-control" id="Name" />
            <ValidationMessage For="@(() => user.Name)" />
        </div>
        <div class="form-group">
            <input @bind-value="user.Email" type="text" placeholder="Email" class="form-control" id="Email" readonly />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="form-group">
            <input @bind-value="user.PhoneNumber" type="text" placeholder="Mobile Number" class="form-control" id="Phone" />
            <ValidationMessage For="@(() => user.PhoneNumber)" />
        </div>       
        <div class="form-group">
            <input @bind-value="user.Street" type="text" placeholder="Street" class="form-control" id="Street" />
            <ValidationMessage For="@(() => user.Street)" />
        </div>
        <div class="form-group">
            <input @bind-value="user.City" type="text" placeholder="City" class="form-control" id="City" />
            <ValidationMessage For="@(() => user.City)" />
        </div>
        <div class="form-group">
            <input @bind-value="user.State" type="text" placeholder="Province" class="form-control" id="Province" />
            <ValidationMessage For="@(() => user.State)" />
        </div>
        <div class="form-group">
            <input @bind-value="user.Country" type="text" placeholder="Country" class="form-control" id="Country" />
            <ValidationMessage For="@(() => user.Country)" />
        </div>
        <div class="form-group">
            <input @bind-value="user.PostCode" type="text" placeholder="Zip" class="form-control" id="Zip" />
            <ValidationMessage For="@(() => user.PostCode)" />
        </div>
        <div class="form-group mr-3 ">
            <div class="custom-file  mr-3">
                <InputFile class="form-control" OnChange="@onFileChange" />
            </div>
        </div>

        <button class="btn btn-primary btn-lg btn-block mb-2" type="submit" @onclick="OnSubmit">Update</button>
       
    </EditForm>
       
</div>
@code {
    [Parameter]
    public string msg { get; set; }

    public string deliveryman { get; set; }
    public string logo { get; set; }
    public HttpClient httpClient = new HttpClient();
    private RegisterUser user = new RegisterUser();

    protected override async Task OnInitializedAsync()
    {

        httpClient.BaseAddress = new Uri(Constants.IdentityUri);
        deliveryman = AuthService.User.UserName;
        user = (await httpClient.GetFromJsonAsync<RegisterUser>($"api/Ossuser/OneByEmail/" + deliveryman));
        if (user.Logo != null)
            logo = Utils.BuildLogoPath(user.Logo);
        else
            logo = "";
    }

    private async Task EditProfilePut()
    {
        var multipartContent = new MultipartFormDataContent();
        multipartContent.Add(new StringContent(user.Name), "Name");
        multipartContent.Add(new StringContent(user.Email), "Email");
        //multipartContent.Add(new StringContent(user.Password), "Password");
        //multipartContent.Add(new StringContent(user.ConfirmPassword), "ConfirmPassword");
        multipartContent.Add(new StringContent(user.PhoneNumber), "PhoneNumber");
        multipartContent.Add(new StringContent(user.Street), "Street");
        multipartContent.Add(new StringContent(user.City), "City");
        multipartContent.Add(new StringContent(user.State), "State");
        multipartContent.Add(new StringContent(user.Country), "Country");
        multipartContent.Add(new StringContent(user.PostCode), "PostCode");
        multipartContent.Add(new StringContent("DeliveryMan"), "Role");

        var img = new StreamContent(user.UploadImg?.OpenReadStream());
        Log.Debug(user.UploadImg.Name);
        Log.Debug(user.UploadImg.ContentType);
        img.Headers.ContentType = new MediaTypeHeaderValue(user.UploadImg.ContentType);
        multipartContent.Add(content: img, "UploadImg", fileName: user.UploadImg.Name);


        //httpClient.BaseAddress = new Uri(Constants.IdentityUri);
        HttpResponseMessage response = await httpClient.PutAsync("http://localhost:5191/api/User/UpdatedOne", multipartContent);

        if (response.IsSuccessStatusCode)
        {
            string msg = "Update Profile succeed!";
            NavigationManager.NavigateTo($"/Account/Profile/{msg}");
        }
        else
        {
            string msg = "Update Profile failed.Please try again";
            NavigationManager.NavigateTo($"/Account/EditProfile/{msg}");
        }
    }

    private async void onFileChange(InputFileChangeEventArgs e)
    {
        user.UploadImg =e.File;

    }

    private async Task OnSubmit()
    {
        await EditProfilePut();
    }

}

