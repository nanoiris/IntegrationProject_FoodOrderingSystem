@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json

@*
<input type="text" @bind="@Postcode" />
<button @onclick="SearchMap">Search</button>*@

<div id="map" @ref="mapDiv" style="height: 100px; width: 100%;"></div>

@code {
    [Parameter]
    public string PostcodeRest { get; set; }

    [Parameter]
    public string PostcodeUser { get; set; }

    public double LatitudeRest { get; set; }
    public double LongitudeRest { get; set; }

    public double LatitudeUser { get; set; }
    public double LongitudeUser { get; set; }

    //private ElementReference MapElement { get; set; }
    private ElementReference mapDiv;
    private string MapElement = null;

    public HttpClient httpClient = new HttpClient();   

    protected override async Task OnInitializedAsync()
    {
        var address = $"{PostcodeRest}, CA";
        var requestUri = $"https://maps.googleapis.com/maps/api/geocode/json?address={address}&key=AIzaSyAAvTxW9M4D-W80QH9g0mjnGL1dI_TAJhM";
        var response = await httpClient.GetAsync(requestUri);
        var content = await response.Content.ReadAsStringAsync();
        var result = JsonConvert.DeserializeObject<GoogleMapsApiResult>(content);

        if (result.Status == "OK")
        {
            var location = result.Results.FirstOrDefault()?.Geometry.Location;
            if (location != null)
            {
                LatitudeRest = location.Lat;
                LongitudeRest = location.Lng;
            }
        }

        var address1 = $"{PostcodeUser}, CA";
        var requestUri1 = $"https://maps.googleapis.com/maps/api/geocode/json?address={address1}&key=AIzaSyAAvTxW9M4D-W80QH9g0mjnGL1dI_TAJhM";
        var response1 = await httpClient.GetAsync(requestUri1);
        var content1 = await response1.Content.ReadAsStringAsync();
        var result1 = JsonConvert.DeserializeObject<GoogleMapsApiResult>(content1);

        if (result1.Status == "OK")
        {
            var location1 = result1.Results.FirstOrDefault()?.Geometry.Location;
            if (location1 != null)
            {
                LatitudeUser = location1.Lat;
                LongitudeUser = location1.Lng;
            }
        }

        //await JSRuntime.InvokeAsync<object>("initMap", Latitude, Longitude); 
        await JSRuntime.InvokeVoidAsync("initMap", LatitudeRest, LongitudeRest, LatitudeUser, LongitudeUser);
        //await JSRuntime.InvokeVoidAsync("initMap", Latitude, Longitude);
    }
    public class GoogleMapsApiResult
    {
        public string Status { get; set; }
        public List<GoogleMapsApiAddress> Results { get; set; }
    }

    public class GoogleMapsApiAddress
    {
        public string FormattedAddress { get; set; }
        public GoogleMapsApiGeometry Geometry { get; set; }
        // Other properties representing location information
    }

    public class GoogleMapsApiGeometry
    {
        public GoogleMapsApiLocation Location { get; set; }
        // Other properties representing location information
    }

    public class GoogleMapsApiLocation
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }
    
}
