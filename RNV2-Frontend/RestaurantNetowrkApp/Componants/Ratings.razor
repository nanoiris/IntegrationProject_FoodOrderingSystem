@using Services;
@inject RatingService ratingService;

@using Data.Dto

<div class="star-rating ml-auto">
    <div class="d-inline-block h6 m-0">
    @if(yellowStars != null)
    {
        @foreach(int i in yellowStars)
        {
                <i class="feather-star text-warning ml-1" @onclick="() =>rate(target, targetId, username, i)"></i>

        }
    }
    @if (blackStars != null)
    {
        @foreach(int j in blackStars)
        {
                <i class="feather-star text-muted ml-1" @onclick="() =>rate(target, targetId, username, j)"></i>
        }
    }
       
    </div>
</div>

@code {
    [Parameter] public string targetId { get; set; }
    [Parameter] public string username { get; set; }
    [Parameter] public string target { get; set; }
    [Parameter] public OrderDto order { get; set; }
    private int score = 0;
    private int[] yellowStars;
    private int[] blackStars;

    protected override async Task OnInitializedAsync()
    {
        blackStars = new int[]{1,2,3,4,5};
    }

    private async Task rate(string target, string targetId, string username, int value)
    {
        bool result = false;
        if(target == "rest")
        {
            result = await ratingService.rateRestaurant(targetId, username, value);
        }
        else if(target == "menu")
        {
            result = await ratingService.rateMenuItem(targetId, username, value, order.RestaurantId);
        }
        else if(target == "delivery")
        {
            result = true;
        }

        if (result) 
        {
            score = value;
            yellowStars = new int[score];
            for (int i = 0; i < score; i++)
            {
                yellowStars[i] = i + 1;
            }
            if (score < 5)
            {
                blackStars = new int[5 - score];
                for (int i = score; i < 5; i++)
                {
                    blackStars[i-score] = i + 1;
                }
            }
            else
            {
                blackStars = null;
            }
            StateHasChanged();
        }
    }
}
