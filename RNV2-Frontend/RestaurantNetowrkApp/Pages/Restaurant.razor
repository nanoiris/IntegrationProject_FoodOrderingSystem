@page "/Restaurant/{restId}"
@using RestaurantNetowrkApp.Componants
@inject IJSRuntime JSRuntime
@using Data.Dto
@using System.Net.Mime;
@using System.Net.Http.Json;
@using Serilog;
@using RestaurantDaoBase.Models;
@using System.Text.Json;
@using System.Text;
@inject Data.SessionStorageAccessor SessionStorageAccessor
@inject NavigationManager NavigationManager



<div class="osahan-restaurant">
    <div class="osahan-restaurant-detail">
        <div class="p-3 osahan-inner-header bg-primary">
            <div class="d-flex align-items-center">
                <a class="font-weight-bold text-white text-back text-decoration-none d-flex" href="">
                    <span class="pl-2">Back</span>
                </a>
                <div class="ml-auto d-flex align-items-center">
                    <a class="text-white mx-2 top-nav-btn top-nav-btn-cart fs-18 position-relative"
                       href="#ratings-and-reviews"><i class="feather-map-pin"></i></a>
                    <a class="text-white mx-2 top-nav-btn top-nav-btn-cart fs-18 position-relative"
                       href="contact-us.html"><i class="feather-phone"></i></a>
                </div>
            </div>
        </div>
        <div class="px-3 pt-4 pb-3 bg-primary">
            <div>
                <h2 class="font-weight-bold text-white">@restaurant.Name</h2>
                @if (@restaurant.Address != null)
                {
                    <p class="font-weight-light text-white-50 m-0">@restaurant.Address.Street , @restaurant.Address.City</p>
                }
                
                <div class="rating-wrap d-flex align-items-center mt-2">
                    <ul class="rating-stars list-unstyled m-0">
                        <RatingStars />
                    </ul>
                </div>
            </div>
        </div>
        <div>
            <p class="font-weight-bold px-3 pt-3 m-0">FEATURED ITEMS</p>

            <div class="restaurant-slider rounded overflow-hidden">
                @if (FeaturedMenuItems != null)
                {
                    @foreach(var menuItem in FeaturedMenuItems)
                    {
                        <div class="osahan-slider-item px-1 py-3">
                            <MenuItemCard  Item="@menuItem"/>
                        </div>
                    }
                }               
            </div>
        </div>
    </div>

    <div class="px-3 pt-3 pb-5">
        <div class="d-flex item-aligns-center">
            <p class="font-weight-bold">Menu</p>
        </div>
        @if (menuCategories != null)
        {
            @foreach(var menuCategory in menuCategories)
            {
                <div class="row">
                    <h6 class="mb-3 mt-3 col-md-12">
                        @menuCategory.Name
                        <small class="text-black-50"> @menuCategory.MenuItemList.Count() ITEMS</small>
                    </h6>
                    <div class="col-md-12 px-0 border-top">
                        <div class="bg-white mb-4">
                            @foreach(var menuItem in menuCategory.MenuItemList)
                            {
                                <div class="p-3 border-bottom gold-members d-flex">
                                    <div class="media">
                                        <div class="mr-3 font-weight-bold text-danger ml-1">
                                            <img src="@(Data.Constants.imgUrl+@menuItem.Logo)" width="40px" height="40px">
                                        </div>
                                        <div class="media-body">
                                            <h6 class="mb-1">@menuItem.Name </h6>
                                            <p class="text-muted mb-0">$@menuItem.Price</p>
                                        </div>
                                    </div>
                                    <span class="ml-auto" id=@("add" + menuItem.Id)>
                                        <a @onclick="() => addToCart(menuItem)"
                                           class="btn btn-outline-secondary btn-sm add-sm-btn">ADD</a>
                                    </span>
                                    <div class="osahan-quantity ml-auto" style="display:none" id=@("quantity" + menuItem.Id)>
                                        <input type="button" value="-" class="minus" @onclick="() => decrease(menuItem.Id)">
                                        <input type="text" id=@("iptQty" + menuItem.Id) name="quantity" value="1" title="Qty" class="qty" size="4">
                                        <input type="button" value="+" class="plus" @onclick="() => increase(menuItem.Id)">
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
         }
        
    </div>


        <div class="fixed-bottom p-3">
            <a href="/Order/Review/1"
               class="btn btn-success btn-block btn-lg text-white rounded shadow text-decoration-none d-flex align-items-center shadow">
                <div class="border-right pr-3">
                    <h4 class="m-0"><i class="feather-shopping-bag" aria-hidden="true"></i></h4>
                </div>
                <div class="ml-3 text-left">
                <p class="mb-0 small text-white-50 " id="orderItemQty">0 item</p>
                <p class="mb-0 font-weight-bold text-white" id="subTotal">$0.00</p>
                </div>
                <div class="ml-auto">
                    <p class="mb-0 text-white">
                        Proceed to cart
                        <i class="feather-chevron-right pl-2" aria-hidden="true"></i>
                    </p>
                </div>
            </a>
        </div>

    

</div>
@code {
    [Parameter]
    public string restId { get; set; }

    private bool render = true;
    private OrderDto orderCart = null;

    public RestaurantDto restaurant = new RestaurantDto();
    public List<MenuCategoryDto> menuCategories = new List<MenuCategoryDto>();
    public List<MenuItemDto> FeaturedMenuItems = new List<MenuItemDto>();

    public HttpClient httpRest = new HttpClient();
    private HttpClient httpOrder = new HttpClient();

    private string orderBaseHttp = Data.Constants.OrderUri;

    protected override async Task OnInitializedAsync()
    {
        Log.Debug("Rest:" + restId);
        httpRest.BaseAddress = new Uri(Data.Constants.RestUri);
        httpOrder.BaseAddress = new Uri(Data.Constants.OrderUri);

        restaurant = await httpRest.GetFromJsonAsync<RestaurantDto>($"api/restaurant/one/"+ restId);
        menuCategories = (await httpRest.GetFromJsonAsync<List<MenuCategoryDto>>($"api/menucategory/list/" + restId)).ToList();
        FeaturedMenuItems = (await httpRest.GetFromJsonAsync<List<MenuItemDto>>($"api/menucategory/featuredlist/{restId}")).ToList();
        getCart();
    }

    //invoke javascript for slick
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (FeaturedMenuItems.Count != 0 && render)
        {
            await JSRuntime.InvokeAsync<object>("restaurantSlick");
            //firstRender = false;
        }
        await base.OnAfterRenderAsync(firstRender);

    }

    private async void addToCart(MenuItemDto menuItem)
    {
        //string userEmail = await SessionStorageAccessor.GetValueAsync<string>("userEmail");
        HttpResponseMessage response;
        string userEmail = "u3@gmail.com";
        if (userEmail == null)
        {
            string msg = "Please login to make an order";
            NavigationManager.NavigateTo($"/Account/Login/{msg}");
            render = false;
        }
        else
        {
            //if current user already have an unpaid order in current restaurant, update this order(orderCart)
            if (orderCart != null)
            {
                var orderItem = new
                {
                    id = menuItem.Id,
                    name = menuItem.Name,
                    description = menuItem.Description,
                    isFeatured = menuItem.IsFeatured,
                    price = menuItem.Price,
                    logo = menuItem.Logo,
                    categoryId = menuItem.CategoryId,
                };
                render = false;
                response = await httpOrder.PutAsJsonAsync($"api/cart/dishaddedtocart/{orderCart.Id}", orderItem);
            }
            //if current user dosn't have an unpaid order in current restaurant, create new order
            else
            {
                var cart = new
                {
                    email = userEmail,
                    menuItem = menuItem,
                    restaurantId = restId,
                    restaurantName = restaurant.Name,
                };
                render = false;
                response = await httpOrder.PostAsJsonAsync("api/cart/newone", cart);

            }
            if (response.IsSuccessStatusCode)
            {
                getCart();
            }
        }     

    }

    private async void increase(string menuItemId)
    {
        string orderId = orderCart.Id;
        List<OrderItemDto> orderItems = orderCart.ItemList;
        OrderItemDto orderItem = orderItems.FirstOrDefault(x => x.Item.Id == menuItemId);
        string orderItemId = orderItem.Id;
        render = false;
        var response =await httpOrder.PutAsync($"api/cart/increaseqty/{orderId}/{orderItemId}", null);
        if (response.IsSuccessStatusCode)
        {
            orderItem.Qty++;
            await JSRuntime.InvokeAsync<object>("showItemInCart", menuItemId, orderItem.Qty);
            orderCart = await httpOrder.GetFromJsonAsync<OrderDto>($"api/order/one/{orderId}");
            await JSRuntime.InvokeAsync<object>("showTotal", orderCart.ItemList.Count().ToString(), orderCart.SubTotal.ToString());

        }

    }

    private async void decrease(string menuItemId)
    {
        string orderId = orderCart.Id;
        List<OrderItemDto> orderItems = orderCart.ItemList;
        OrderItemDto orderItem = orderItems.FirstOrDefault(x => x.Item.Id == menuItemId);
        string orderItemId = orderItem.Id;
        render = false;
        var response = await httpOrder.PutAsync($"api/cart/decreaseqty/{orderId}/{orderItemId}", null);
        if (response.IsSuccessStatusCode){          
            if(orderItem.Qty == 1)
            {
                await JSRuntime.InvokeAsync<object>("changeToAdd", menuItemId);
            }
            else
            {
                orderItem.Qty--;
                await JSRuntime.InvokeAsync<object>("showItemInCart", menuItemId, orderItem.Qty);
            }
            orderCart = await httpOrder.GetFromJsonAsync<OrderDto>($"api/order/one/{orderId}");
            await JSRuntime.InvokeAsync<object>("showTotal", orderCart.ItemList.Count().ToString(), orderCart.SubTotal.ToString());

        }

    }

    // check if this user has an unpaid order in this restaurant
    private async void getCart()
    {
        Log.Debug("getcart");
        //string userEmail = await SessionStorageAccessor.GetValueAsync<string>("userEmail");
        string userEmail = "u3@gmail.com";

        if (userEmail != null)
        {
            //string requestBody = JsonSerializer.Serialize(
            //    new
            //    {
            //        userName = userEmail,
            //        status = 0,
            //        restaurantId = restId
            //    }
            //);

            //var request = new HttpRequestMessage
            //    {
            //        Method = HttpMethod.Get,
            //        RequestUri = new Uri(orderBaseHttp + "api/order/search"),
            //        Content = new StringContent(requestBody, Encoding.UTF8, "application/json"),
            //    };

            //Log.Debug("request uri:"+ request.RequestUri.ToString());
            //Log.Debug("request content:" + (await request.Content.ReadAsStringAsync()));

            //HttpResponseMessage response = await httpOrder.SendAsync(request);
            //response.EnsureSuccessStatusCode();

            //var responseBody = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            //Log.Debug(responseBody);

            //var orders = JsonSerializer.Deserialize<List<OrderDto>>(responseBody);

            //orderCart = orders.FirstOrDefault(x => x.RestaurantId == restId);

            var requestBody =
                new
                {
                    email = userEmail,
                    status = 0,
                    restaurantId = restId
                };
            HttpResponseMessage response = await httpOrder.PostAsJsonAsync("api/order/search", requestBody);
            Log.Debug(response.IsSuccessStatusCode.ToString());
            var responseBody = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            var orders = JsonSerializer.Deserialize<List<OrderDto>>(responseBody);
            if( orders.Count != 0)
            {
                orderCart = orders[0];
                Log.Debug("get orderCart: " + orderCart.Id);
                showCart();
                var qty = orderCart.ItemList.Count().ToString();
                var subTotal = orderCart.SubTotal.ToString();
                await JSRuntime.InvokeAsync<object>("showTotal", qty, subTotal);

            }
        }     
    }

    private async void showCart()
    {
        Log.Debug("showCart begin");
        foreach (var orderItem in orderCart.ItemList)
        {
            await JSRuntime.InvokeAsync<object>("showItemInCart", orderItem.Item.Id, orderItem.Qty.ToString());
        }
    }


}
