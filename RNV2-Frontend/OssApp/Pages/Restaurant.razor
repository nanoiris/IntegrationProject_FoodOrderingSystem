@page "/Restaurant"
@using OssApp.Model
@using OssApp.Services
@inject RestaurantService service
@inject RestCategoryService restCateService
@inject DialogService DialogService
@inject NavigationManager navManager
@inject NotificationService NotificationService

<div class="rz-m-12 m-0">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Home" />
        <RadzenBreadCrumbItem Path="/Restaurant" Text="Restaurant" />
    </RadzenBreadCrumb>
</div>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Restaurant" Click="@InsertRow" Disabled=@(rowToInsert != null || rowToUpdate != null) />
<RadzenDataGrid @ref="myGrid" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="false" AllowSorting="false" EditMode="DataGridEditMode.Single"
                Data="@rows" TItem="RestaurantModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="RestaurantModel" Property="Logo" Title="Logo" Width="60px">
            <Template Context="row">
                @if (row.Logo != null)
                {
                    <RadzenImage Path="@row.Logo" style="width: 48px; height: 48px; border-radius: 24px; margin-right: 6px;" />
                }
                @if (row.Id != null)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="upload" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => OpenUploadDialog(row))" @onclick:stopPropagation="true">
                    </RadzenButton>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="RestaurantModel" Property="Name" Title="Name" Width="160px">
            <EditTemplate Context="row">
                <RadzenTextBox @bind-Value="row.Name" Style="width:100%; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="RestaurantModel" Property="IsFeatured" Title="Featured" Width="60px">
            <Template Context="row">
                <RadzenSwitch @bind-Value="row.IsFeatured" Disabled="true" />
            </Template>
            <EditTemplate Context="row">
                <RadzenSwitch @bind-Value="row.IsFeatured" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="RestaurantModel" Property="CategoryName" Title="Category" Width="80px">
            <EditTemplate Context="row">
                <RadzenDropDown @bind-Value="row.CategoryId" Data="@categories" TextProperty="Name" ValueProperty="Id" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="RestaurantModel" Property="Description" Title="Description" Width="160px">
            <EditTemplate Context="row">
                <RadzenTextBox @bind-Value="row.Description" Style="width:100%; display: block" Name="Description" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="RestaurantModel" Context="row" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="100px" Title="Action">
            <Template Context="row">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(row))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(row))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton Icon="more" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditAdress(row))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="row">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(row))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(row))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(row))">
                </RadzenButton>
                <RadzenButton Icon="more" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditAdress(row))" @onclick:stopPropagation="true">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="RestaurantModel" Title="User" Context="row" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="60px">
            <Template Context="row">
                <RadzenButton Icon="account_box" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => GotoUserPage(row))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<RestaurantModel> myGrid;
    List<RestaurantModel> rows;
    RestaurantModel rowToInsert;
    RestaurantModel rowToUpdate;

    RestaurantModel rowToSaved;
    IEnumerable<RestCategoryModel> categories;

    void Reset()
    {
        rowToInsert = null;
        rowToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await restCateService.List();
        service.BuildCateDict(categories);
        rows = await service.List();
    }

    async Task EditRow(RestaurantModel row)
    {
        rowToSaved = new RestaurantModel(row);

        rowToUpdate = row;
        await myGrid.EditRow(row);
    }

    async Task EditAdress(RestaurantModel row)
    {
        rowToUpdate = row;
        await myGrid.EditRow(row);
    }

    void OnFeaturedChange(RestaurantModel row)
    {
        row.IsFeatured = !row.IsFeatured;
    }

    void OnUpdateRow(RestaurantModel row)
    {
        if (row == rowToInsert)
            rowToInsert = null;

        rowToUpdate = null;
        var result = service.UpdateOneMain(row);
        if (result == null)
        {
            row.CopyFrom(rowToSaved);
            var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Cannot update the restaurant",
                    Duration = 2500
                };
            NotificationService.Notify(message);
        }
    }

    async Task SaveRow(RestaurantModel row)
    {
        await myGrid.UpdateRow(row);
    }

    void CancelEdit(RestaurantModel row)
    {
        if (row == rowToInsert)
        {
            rowToInsert = null;
        }
        rowToUpdate = null;
        myGrid.CancelEditRow(row);
    }

    async Task DeleteRow(RestaurantModel row)
    {
        var isConfirmed = await DialogService.Confirm($"Are you sure to delete the restaurant {row.Name}?",
                          "Restaurant",
                          new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (isConfirmed == false)
            return;
        if (row == rowToInsert)
            rowToInsert = null;
        if (row == rowToUpdate)
            rowToUpdate = null;
        if (rows.Contains(row))
        {
            var result = service.DeleteOne(row);
            if (result == true)
            {
                rows.Remove(row);
                myGrid.Reload();
            }
            else
            {
                var message = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Cannot delete the restaurant",
                        Duration = 2500
                    };
                NotificationService.Notify(message);
            }
        }
        else
        {
            myGrid.CancelEditRow(row);
            await myGrid.Reload();
        }
    }
    async Task InsertRow()
    {
        var category = categories?.FirstOrDefault();
        string cateId = "0", cateName = "";

        if (category != null)
        {
            cateId = category.Id;
            cateName = category.Name;        
        }
        rowToInsert = new RestaurantModel
            { Name = "", CategoryId = cateId, CategoryName = cateName, IsFeatured = false };
        await myGrid.InsertRow(rowToInsert);
    }

    async Task OnCreateRow(RestaurantModel row)
    {
        string id = service.AddNewOne(row);
        if (id != null)
        {
            row.Id = id;
            rows.Add(row);
            rowToInsert = null;
        }
        else
        {
            rows.Remove(row);
            await myGrid.Reload();
            if (row == rowToInsert)
                rowToInsert = null;

            var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Cannot create new restaurant",
                    Duration = 2500
                };
            NotificationService.Notify(message);
        }
    }
    async Task OpenUploadDialog(RestaurantModel row)
    {
        string uploadUrl = service.LogoUploadUrl + row.Id;
        await DialogService.OpenAsync<UploadLogoDialog>($"Restaurant Logo Dialog",
              new Dictionary<string, object>() { { "Id", row.Id }, { "UploadUrl", uploadUrl }, { "row", row } },
              new DialogOptions() { Width = "700px", Height = "512px", Resizable = false, Draggable = false });
    }

    void GotoUserPage(RestaurantModel row)
    {
        navManager.NavigateTo($"/User?RestId={row.Id}&RestName={row.Name}&RestLogo={row.Logo}");
    }
}
