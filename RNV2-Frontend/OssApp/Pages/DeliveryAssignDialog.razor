@page "/DeliveryAssignDialog"

@using OssApp.Model
@using OssApp.Services
@inject Radzen.DialogService DialogService
@inject DeliveryService deliveryService
@inject UserService userService
@inject NotificationService NotificationService

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@rows" TItem="AppUserModel" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="AppUserModel" Property="Id" Filterable="false" Title="ID" Frozen="true" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="AppUserModel" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="row">
                @if (row.Logo != null)
                {
                <RadzenImage Path="@row.Logo" class="rz-gravatar" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AppUserModel" Property="Name" Title="Name"  />
        <RadzenDataGridColumn TItem="AppUserModel" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="AppUserModel" Context="row" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Title="Assign">
            <Template Context="row">
                <RadzenButton Icon="assignment_turned_in" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => OnAssign(row))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public DeliveryModel DeliveryRow { get; set; }

    RadzenDataGrid<AppUserModel> myGrid;
    List<AppUserModel> rows;

    protected override async Task OnInitializedAsync()
    {
        rows = await userService.ListAvaliableDeliveryMan();
    }

    public async Task OnAssign(AppUserModel row)
    {
        var isConfirmed = await DialogService.Confirm($"Are you sure to assign the delivery to {row.Name}?","Delivery",
           new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (isConfirmed == false)
            return;
     
        var result = deliveryService.Assign(DeliveryRow, AuthService.User.UserName, row.Email);
        var message = new NotificationMessage();
        message.Duration = 2500;

        if (result != null)
        {
            DeliveryRow.DeliveryMan = row.Email;
            message.Severity = NotificationSeverity.Success;
            message.Summary = $"The order({DeliveryRow.Id}) is assign to {row.Name}";
            DialogService.Close(false);
        }
        else
        {
            message.Severity = NotificationSeverity.Error;
            message.Summary = $"Error to assign the delivery({row.Id})";
        }
        NotificationService.Notify(message);
    }
}