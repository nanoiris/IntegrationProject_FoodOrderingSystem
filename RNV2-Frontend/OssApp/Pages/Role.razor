@page "/Role"
@using OssApp.Model
@using OssApp.Services
@inject RoleService service

<div class="rz-m-12 m-0">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/" Text="Home" />
        <RadzenBreadCrumbItem Path="/Role" Text="Role" />
    </RadzenBreadCrumb>
</div>
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Row" Click="@InsertRow" Disabled=@(rowToInsert != null || rowToUpdate != null) />
<RadzenDataGrid @ref="myGrid" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="false" AllowSorting="false" EditMode="DataGridEditMode.Single"
                Data="@rows" TItem="RoleModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="RoleModel" Property="Id" Title="Role ID" Width="280px" />
        <RadzenDataGridColumn TItem="RoleModel" Property="Name" Title="Role Name" Width="280px">
            <EditTemplate Context="row">
                <RadzenTextBox @bind-Value="row.Name" Style="width:100%; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="RoleModel" Context="row" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="row">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(row))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(row))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="row">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(row))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(row))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(row))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<RoleModel> myGrid;
    List<RoleModel> rows;
    RoleModel rowToInsert;
    RoleModel rowToUpdate;

    void Reset()
    {
        rowToInsert = null;
        rowToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        rows = await service.List();
    }

    async Task EditRow(RoleModel row)
    {
        rowToUpdate = row;
        await myGrid.EditRow(row);
    }

    void OnUpdateRow(RoleModel row)
    {
        if (row == rowToInsert)
        {
            rowToInsert = null;
        }

        rowToUpdate = null;
        service.UpdateOne(row);

    }

    async Task SaveRow(RoleModel row)
    {
        await myGrid.UpdateRow(row);
    }

    void CancelEdit(RoleModel row)
    {
        if (row == rowToInsert)
        {
            rowToInsert = null;
        }

        rowToUpdate = null;

        myGrid.CancelEditRow(row);

    }

    async Task DeleteRow(RoleModel row)
    {
        if (row == rowToInsert)
        {
            rowToInsert = null;
        }

        if (row == rowToUpdate)
        {
            rowToUpdate = null;
        }

        if (rows.Contains(row))
        {
            var result = service.DeleteOne(row);
            if (result == true)
            {
                rows.Remove(row);
                myGrid.Reload();
            }
            else
            {
                //TODO
            }
        }
        else
        {
            myGrid.CancelEditRow(row);
            await myGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        rowToInsert = new RoleModel { Name = ""};
        await myGrid.InsertRow(rowToInsert);
    }

    void OnCreateRow(RoleModel row)
    {
        string id = service.AddNewOne(row);
        if(id != null)
        {
            row.Id = id;
            rowToInsert = null;
        }            
        else
        {
            //TODO
        }
    }
}
